
name: Gemini AI Code Review

on:
  pull_request:
    types: [opened, synchronize]

jobs:
  code-review:
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
      contents: read
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get changed files
        id: changed-files
        run: |
          # Get the list of changed files
          git diff --name-only origin/${{ github.base_ref }}..HEAD > changed_files.txt
          echo "Changed files:"
          cat changed_files.txt
          
          # Get the diff content
          git diff origin/${{ github.base_ref }}..HEAD > changes.diff
          echo "changes_exist=$(test -s changes.diff && echo 'true' || echo 'false')" >> $GITHUB_OUTPUT

      - name: Review code with Gemini
        if: steps.changed-files.outputs.changes_exist == 'true'
        id: gemini-review
        run: |
          # Read the diff content
          DIFF_CONTENT=$(cat changes.diff)
          
          # Create the prompt for Gemini
          PROMPT="Please review this code diff and provide constructive feedback. Focus on:
          1. Code quality and best practices
          2. Potential bugs or issues
          3. Security concerns
          4. Performance improvements
          5. Maintainability
          
          Here's the diff:
          $DIFF_CONTENT"
          
          # Prepare JSON payload
          JSON_PAYLOAD=$(jq -n \
            --arg prompt "$PROMPT" \
            '{
              "contents": [{
                "parts": [{
                  "text": $prompt
                }]
              }],
              "generationConfig": {
                "temperature": 0.1,
                "maxOutputTokens": 2048
              }
            }')
          
          # Call Gemini API
          RESPONSE=$(curl -s -X POST \
            "https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent?key=${{ secrets.GEMINI_API_KEY }}" \
            -H "Content-Type: application/json" \
            -d "$JSON_PAYLOAD")
          
          # Extract the review text and save to file
          echo "$RESPONSE" | jq -r '.candidates[0].content.parts[0].text // "Failed to get review from Gemini"' > review.md
          
          # Check if review was successful
          if [ -s review.md ]; then
            echo "review_success=true" >> $GITHUB_OUTPUT
          else
            echo "review_success=false" >> $GITHUB_OUTPUT
            echo "Failed to get review from Gemini" > review.md
          fi

      - name: Post review comment
        if: steps.changed-files.outputs.changes_exist == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const reviewText = fs.readFileSync('review.md', 'utf8');
            
            const comment = `## ü§ñ Gemini AI Code Review
            
            ${reviewText}
            
            ---
            *This review was automatically generated by Gemini AI*`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

      - name: Handle API errors
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            const comment = `## ‚ùå Gemini AI Code Review Failed
            
            The automated code review failed to complete. This could be due to:
            - Invalid or missing GEMINI_API_KEY
            - API rate limits
            - Network issues
            - Large diff size
            
            Please check the workflow logs for more details.`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
